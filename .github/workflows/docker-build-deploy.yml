name: Docker Build and Deploy with Auto-Versioning

on:
  push:
    branches: [ "main" ]

env:
  REGISTRY: docker.io
  IMAGE_NAME: aneesh123123/autoincrement  # Must match exactly your Docker Hub repo

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    permissions:
      contents: write  # Needed for version bump commits
      packages: write

    steps:
      # 1. Checkout code
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Needed for git history

      # 2. Docker setup
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      # 3. Docker Hub login
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_TOKEN }}

      # 4. Auto-increment version
      - name: Read and increment version
        id: version
        run: |
          # Read current version from file
          if [ -f VERSION ]; then
            CURRENT_VERSION=$(cat VERSION)
          else
            CURRENT_VERSION="0.0.0"
            echo $CURRENT_VERSION > VERSION
          fi
          
          echo "Current version: $CURRENT_VERSION"
          
          # Increment patch version (can modify for major/minor)
          IFS='.' read -r major minor patch <<< "$CURRENT_VERSION"
          NEW_VERSION="$major.$minor.$((patch + 1))"
          echo "New version: $NEW_VERSION"
          
          # Update VERSION file
          echo "$NEW_VERSION" > VERSION
          
          # Set outputs
          echo "current_version=$CURRENT_VERSION" >> $GITHUB_OUTPUT
          echo "new_version=$NEW_VERSION" >> $GITHUB_OUTPUT
          
          # Configure git
          git config --global user.name "GitHub Actions"
          git config --global user.email "actions@github.com"
          git add VERSION
          git commit -m "Bump version to $NEW_VERSION [skip ci]"
          git push

      # 5. Verify Docker Hub access
      - name: Verify Docker Hub permissions
        run: |
          echo "Testing access to repository..."
          TOKEN=$(curl -s -H "Content-Type: application/json" \
            -X POST \
            -d '{"username": "'"${{ secrets.DOCKER_HUB_USERNAME }}"'", "password": "'"${{ secrets.DOCKER_HUB_TOKEN }}"'"}' \
            https://hub.docker.com/v2/users/login/ | jq -r .token)
          
          RESPONSE=$(curl -s -o /dev/null -w "%{http_code}" -H "Authorization: JWT $TOKEN" \
            "https://hub.docker.com/v2/repositories/${{ env.IMAGE_NAME }}/")
          
          if [ "$RESPONSE" -eq 200 ]; then
            echo "✅ Repository access verified"
          else
            echo "❌ Failed to access repository (HTTP $RESPONSE)"
            exit 1
          fi

      # 6. Build and push Docker image
      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: |
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ steps.version.outputs.new_version }}
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest
          build-args: |
            APP_VERSION=${{ steps.version.outputs.new_version }}

      # 7. Post-build verification
      - name: Verify pushed image
        run: |
          echo "Verifying image was pushed successfully..."
          curl -s "https://hub.docker.com/v2/repositories/${{ env.IMAGE_NAME }}/tags/" \
            | jq '.results[] | select(.name == "${{ steps.version.outputs.new_version }}")'
